apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets-detector.githubSecretName" . }}
  labels:
    {{- include "secrets-detector.githubAppLabels" . | nindent 4 }}
type: Opaque
data:
  webhook-secret: {{ .Values.githubApp.githubSecret.webhookSecret | b64enc }}
  app-id: {{ .Values.githubApp.githubSecret.appID | toString | b64enc }}
  installation-id: {{ .Values.githubApp.githubSecret.installationID | toString | b64enc }}
  # Note: In a real deployment, you would need to provide actual private keys
  github-pem: {{ .Values.githubApp.githubSecret.privateKey | default "dummy-key-for-testing" | b64enc }}
  enterprise-pem: {{ .Values.githubApp.githubSecret.enterprisePrivateKey | default "dummy-key-for-testing" | b64enc }}
  advanced-security-secret: {{ .Values.githubApp.config.advancedSecuritySecret | default (randAlphaNum 32) | b64enc }}
---

# Secret for validation service API key
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets-detector.fullname" . }}-api-key
  labels:
    {{- include "secrets-detector.labels" . | nindent 4 }}
type: Opaque
data:
  api-key: {{ .Values.validation.apiKey | default (randAlphaNum 32) | b64enc }}
---

# Secret for TLS certificates
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets-detector.fullname" . }}-tls
  labels:
    {{- include "secrets-detector.labels" . | nindent 4 }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .Values.tls.serverCert | default "" | b64enc }}
  tls.key: {{ .Values.tls.serverKey | default "" | b64enc }}
  ca.crt: {{ .Values.tls.caCert | default "" | b64enc }}
---

# Secret for mTLS client certificates
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets-detector.fullname" . }}-client-tls
  labels:
    {{- include "secrets-detector.labels" . | nindent 4 }}
type: Opaque
data:
  client.crt: {{ .Values.tls.clientCert | default "" | b64enc }}
  client.key: {{ .Values.tls.clientKey | default "" | b64enc }}
  ca.crt: {{ .Values.tls.caCert | default "" | b64enc }}
---

{{- if not .Values.postgres.credentials.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets-detector.postgresSecretName" . }}
  labels:
    {{- include "secrets-detector.postgresLabels" . | nindent 4 }}
type: Opaque
data:
  POSTGRES_USER: {{ .Values.postgres.credentials.username | b64enc }}
  POSTGRES_PASSWORD: {{ .Values.postgres.credentials.password | b64enc }}
  POSTGRES_DB: {{ .Values.postgres.credentials.database | b64enc }}
  DB_USER: {{ .Values.postgres.credentials.username | b64enc }}
  DB_PASSWORD: {{ .Values.postgres.credentials.password | b64enc }}
  DB_NAME: {{ .Values.postgres.credentials.database | b64enc }}
---
{{- end }}

{{- if and .Values.grafana.enabled (not .Values.grafana.credentials.existingSecret) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets-detector.grafanaSecretName" . }}
  labels:
    {{- include "secrets-detector.grafanaLabels" . | nindent 4 }}
type: Opaque
data:
  GF_SECURITY_ADMIN_USER: {{ .Values.grafana.credentials.adminUser | b64enc }}
  GF_SECURITY_ADMIN_PASSWORD: {{ .Values.grafana.credentials.adminPassword | b64enc }}
{{- end }}